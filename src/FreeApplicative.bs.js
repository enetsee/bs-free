// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Fn$CoreCategory = require("@enetsee/core-category/src/Fn.bs.js");
var Applicative$CoreCategory = require("@enetsee/core-category/src/Applicative.bs.js");

function Make(F) {
  var liftAp = function (x) {
    return /* Ap */Block.__(1, [
              /* Pure */Block.__(0, [(function (x) {
                      return x;
                    })]),
              x
            ]);
  };
  var map_ = function (t, f) {
    if (t.tag) {
      return /* Ap */Block.__(1, [
                map_(t[0], (function (g, x) {
                        return Curry._1(f, Curry._1(g, x));
                      })),
                t[1]
              ]);
    } else {
      return /* Pure */Block.__(0, [Curry._1(f, t[0])]);
    }
  };
  var map = /* `Custom */[
    -198771759,
    map_
  ];
  var pure = function (x) {
    return /* Pure */Block.__(0, [x]);
  };
  var apply = function (t, f) {
    if (f.tag) {
      return /* Ap */Block.__(1, [
                apply(t, map_(f[0], Fn$CoreCategory.flip)),
                f[1]
              ]);
    } else {
      return map_(t, f[0]);
    }
  };
  var include = Applicative$CoreCategory.MakeCustom1({
        pure: pure,
        apply: apply,
        map: map,
        replace: /* Derived */-684824643,
        liftA2: /* Derived */-684824643,
        applyFirst: /* Derived */-684824643,
        applySecond: /* Derived */-684824643
      });
  return {
          map: include.map,
          replace: include.replace,
          $$void: include.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: include.$less$,
          $$great: include.$$great,
          apply: include.apply,
          liftA2: include.liftA2,
          applyFirst: include.applyFirst,
          applySecond: include.applySecond,
          ApplyInfix: include.ApplyInfix,
          $less$star$great: include.$less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          liftA3: include.liftA3,
          liftA4: include.liftA4,
          liftA5: include.liftA5,
          merge: include.merge,
          pure: include.pure,
          when_: include.when_,
          unless: include.unless,
          liftAp: liftAp
        };
}

function MakeOJ(F) {
  var liftAp = function (x) {
    return /* Ap */Block.__(1, [/* tuple */[
                /* Pure */Block.__(0, [(function (x) {
                        return x;
                      })]),
                x
              ]]);
  };
  var map_ = function (t, f) {
    if (t.tag) {
      var match = t[0];
      return /* Ap */Block.__(1, [/* tuple */[
                  map_(match[0], (function (g, x) {
                          return Curry._1(f, Curry._1(g, x));
                        })),
                  match[1]
                ]]);
    } else {
      return /* Pure */Block.__(0, [Curry._1(f, t[0])]);
    }
  };
  var map = /* `Custom */[
    -198771759,
    map_
  ];
  var pure = function (x) {
    return /* Pure */Block.__(0, [x]);
  };
  var apply = function (t, f) {
    if (t.tag) {
      var match = t[0];
      return /* Ap */Block.__(1, [/* tuple */[
                  apply(match[0], map_(f, Fn$CoreCategory.compose)),
                  match[1]
                ]]);
    } else {
      var y = t[0];
      return map_(f, (function (f) {
                    return Curry._1(f, y);
                  }));
    }
  };
  var include = Applicative$CoreCategory.MakeCustom1({
        pure: pure,
        apply: apply,
        map: map,
        replace: /* Derived */-684824643,
        liftA2: /* Derived */-684824643,
        applyFirst: /* Derived */-684824643,
        applySecond: /* Derived */-684824643
      });
  return {
          map: include.map,
          replace: include.replace,
          $$void: include.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: include.$less$,
          $$great: include.$$great,
          apply: include.apply,
          liftA2: include.liftA2,
          applyFirst: include.applyFirst,
          applySecond: include.applySecond,
          ApplyInfix: include.ApplyInfix,
          $less$star$great: include.$less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          liftA3: include.liftA3,
          liftA4: include.liftA4,
          liftA5: include.liftA5,
          merge: include.merge,
          pure: include.pure,
          when_: include.when_,
          unless: include.unless,
          liftAp: liftAp
        };
}

exports.Make = Make;
exports.MakeOJ = MakeOJ;
/* Fn-CoreCategory Not a pure module */
